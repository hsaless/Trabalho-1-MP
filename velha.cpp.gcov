        -:    0:Source:velha.cpp
        -:    1:/**
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:
        -:    5:
        -:    6:#include "velha.hpp"
        -:    7:
        -:    8:/** 
        -:    9: * @brief verifica situacao do jogo da velha  
        -:   10: * @author hsaless 
        -:   11: * @param  velha descreve o parametro
        -:   12: * 
        -:   13: *  Descrever o que a funcao faz
        -:   14: */ 
        -:   15:
        -:   16:
        -:   17:
        -:   18:/**
        -:   19: * \brief Verifica se há vencedor na coluna.
        -:   20: * \param velha Matriz representando o estado do jogo.
        -:   21: * \return 1 se X venceu, 2 se O venceu, 0 se não há vencedor, -2 se ambos ganharem (jogo impossível).
        -:   22: */
        -:   23:
        9:   24:int verifica_coluna(int velha[3][3]) {
        9:   25:  int cont = 0, vencedor = 0;
       36:   26:  for (int j = 0; j < 3; j++) {
       27:   27:    if (velha[0][j] == velha[1][j] && velha[1][j] == velha[2][j]) {
        6:   28:      if (velha[0][j] == 1) {
        2:   29:        cont++;
        2:   30:        vencedor = 1;  // X venceu
        4:   31:      } else if (velha[0][j] == 2) {
        2:   32:        cont++;
        2:   33:        vencedor = 2;  // O venceu
        -:   34:      }
        -:   35:    }
        -:   36:  }
        9:   37:  if (cont > 1) {
        1:   38:    return -2;  // Jogo impossível
        -:   39:  } else {
        8:   40:    return vencedor;  //  Retorna 1 ou 2 se tiver vencedor ou 0 se não há
        -:   41:  }
        -:   42:}
        -:   43:
        -:   44:/**
        -:   45: * \brief Verifica se há vencedor na linha.
        -:   46: * \param velha Matriz representando o estado do jogo.
        -:   47: * \return 1 se X venceu, 2 se O venceu, 0 se não há vencedor, -2 se ambos ganharem (jogo impossível).
        -:   48: */
        -:   49:
        6:   50:int verifica_linha(int velha[3][3]) {
        6:   51:  int cont = 0, vencedor = 0;
       24:   52:  for (int i = 0; i < 3; i++) {
       18:   53:    if (velha[i][0] == velha[i][1] && velha[i][1] == velha[i][2]) {
        3:   54:      if (velha[i][0] == 1) {
        1:   55:        cont++;
        1:   56:        vencedor = 1;  // X venceu
        2:   57:      } else if (velha[i][0] == 2) {
        1:   58:        cont++;
        1:   59:        vencedor = 2;  // O venceu
        -:   60:      }
        -:   61:    }
        -:   62:  }
        6:   63:  if (cont > 1) {
    #####:   64:    return -2;  // Jogo impossível
        -:   65:  } else {
        6:   66:    return vencedor;  //  Retorna 1 ou 2 se tiver vencedor ou 0 se não há
        -:   67:  }
        -:   68:}
        -:   69:
        -:   70:/**
        -:   71: * \brief Verifica se há vencedor na diagonal.
        -:   72: * \param velha Matriz representando o estado do jogo.
        -:   73: * \return 1 se X venceu, 2 se O venceu, 0 se não há vencedor.
        -:   74: */
        -:   75:
        4:   76:int verifica_diagonal(int velha[3][3]) {
        4:   77:  if (velha[0][0] == velha[1][1] && velha[1][1] == velha[2][2]) {
        1:   78:    if (velha[0][0] == 1) {
        1:   79:      return 1;  // X venceu
    #####:   80:    } else if (velha[0][0] == 2) {
    #####:   81:      return 2;  // O venceu
        -:   82:    }
        -:   83:  }
        3:   84:  if (velha[2][0] == velha[1][1] && velha[1][1] == velha[0][2]) {
        1:   85:    if (velha[0][2] == 1) {
    #####:   86:      return 1;  // X venceu
        1:   87:    } else if (velha[0][2] == 2) {
        1:   88:      return 2;  // O venceu
        -:   89:    }
        -:   90:  }
        2:   91:  return 0;  // Sem vencedor
        -:   92:}
        -:   93:
        -:   94:/**
        -:   95: * \brief Verifica se o jogo está empatado.
        -:   96: * \param velha Matriz representando o estado do jogo.
        -:   97: * \return 1 se é empate, 0 se não há empate.
        -:   98: */
        -:   99:
        2:  100:int verifica_empate(int velha[3][3]) {
        5:  101:  for (int i = 0; i < 3; i++) {
       13:  102:    for (int j = 0; j < 3; j++) {
       10:  103:      if (velha[i][j] == 0) {
        1:  104:        return 0;  // Sem empate
        -:  105:      }
        -:  106:    }
        -:  107:  }
        1:  108:  return 1;  // Com empate
        -:  109:}
        -:  110:
        -:  111:/**
        -:  112: * \brief Verifica se o jogo é impossível.
        -:  113: * \param velha Matriz representando o estado do jogo.
        -:  114: * \return 1 se é impossível, 0 se o jogo é possível.
        -:  115: */
        -:  116:
       11:  117:int verifica_impossivel(int velha[3][3]) {
       11:  118:  int cont_x = 0, cont_o = 0;
       44:  119:  for (int i = 0; i < 3; i++) {
      132:  120:    for (int j = 0; j < 3; j++) {
       99:  121:      if (velha[i][j] == 1) {
       41:  122:        cont_x++;
       58:  123:      } else if (velha[i][j] == 2) {
       38:  124:        cont_o++;
        -:  125:      }
        -:  126:    }
        -:  127:  }
       11:  128:  if (cont_x > cont_o + 1 || cont_o > cont_x + 1) {
        2:  129:    return 1;  // Jogo impossível
        -:  130:  }
        9:  131:  return 0;  // Jogo possível
        -:  132:}
        -:  133:
        -:  134:/**
        -:  135: * \brief Verifica o resultado do jogo.
        -:  136: * \param velha Matriz representando o estado do jogo.
        -:  137: * \return 2 se O ganhou, 1 se X ganhou, 0 se o jogo está empatado, -1 se o jogo está em um estado de resultado indeterminado, -2 se  0 se o jogo é impossível.
        -:  138: */
        -:  139:
       11:  140:int VerificaVelha(int velha[3][3]) {
       11:  141:  if (verifica_impossivel(velha) == 1) {
        2:  142:    return -2;  // Retorna -2 se o jogo for impossível
        -:  143:  }
        9:  144:  int vencedor = verifica_coluna(velha);
        9:  145:  if (vencedor != 0) {
        3:  146:    return vencedor;  // Retorna 1 se X ganhar, 2 se O ganhar, ou -2 se ambos ganharem (jogo impossível)
        -:  147:  }
        6:  148:  vencedor = verifica_linha(velha);
        6:  149:  if (vencedor !=  0) {
        2:  150:    return vencedor;  // Retorna 1 se X ganhar, 2 se O ganhar, ou -2 se ambos ganharem (jogo impossível)
        -:  151:  }
        4:  152:  vencedor = verifica_diagonal(velha);
        4:  153:  if (vencedor != 0) {
        2:  154:    return vencedor;  // Retorna 1 se X ganhar ou 2 se O ganhar
        -:  155:  }
        2:  156:  if (verifica_empate(velha) == 1) {
        1:  157:    return 0;  // Retorna 0 se o jogo estiver emapatado
        -:  158:  }
        1:  159:  return -1;  // Retorna -1 se nada acima se aplicar, ou seja, o jogo está incompleto
        -:  160:}
